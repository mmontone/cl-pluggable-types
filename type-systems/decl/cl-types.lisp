(in-package :pluggable-types/decl)

(declaim
 (ftype* (all (a) (function (a) a))
         identity)
 (ftype* (all (a b) (function ((function (a) b) (list-of a)) (list-of b)))
         mapcar)
 (ftype* (all (a) (function (unsigned-byte (list-of a)) a))
         nth)
 (ftype* (all (a) (function ((list-of a)) a))
         first)
 (ftype* (all (a) (function ((list-of a)) (list-of a)))
         rest)
 (ftype* (all (a b) (function ((cons-of a b)) a))
         car)
 (ftype* (all (a b) (function ((cons-of a b)) b))
         cdr)
 (ftype* (all (a b) (function (a b) (cons-of a b)))
         cons)
 (ftype ;;(all (a) (function (&rest a) (list-of a)))
        (function (&rest t) list)
        list)
 #+nil(ftype* (let ((test-function (elem-type)
                              (function (elem-type elem-type) boolean)))
           (all (a b)
                (function (a (alist-of a b)
                             &key (:test (test-function (alist-of a b)))
                             (:test-not (test-function (alist-of a b)))
                             (:key (function ((alist-of a b) t))))
                          (or b null)))
           (function
            (t list &key (:test (or function symbol))
               (:test-not (or function symbol))
               (:key (or function symbol)))))
              assoc)
 )
