A possible plan:
- Use standard Lisp declarations. (declaim (ftype ...)) etc.xs
- Use custom declarations. See the DECLARATION declaration. (declaim (declaration my-custom-declaration)).
Could use an type* and ftype* declaration that contain richer type specs, that are consumed by the pluggable type system, and don't affect the program if pluggable types are not used.
- Implement a portable library for obtaining the types of functions (compiler-info library).
- Read definitions from file using READ function. Use a code-walker to parse and typecheck those definitions.
- "Fake" composite types, using deftype and ignoring arguments, but then the typechecker can look at those. Example: (list-of integer).
 where:

(deftype list-of (a) 
  (declare (ignore a))
  'list)

(deftype cons-of (a b)
  (declare (ignore a b))
  'cons)
  
Also polymorphic vars:

(all (x) (function ((list-of x)) x))
  
 Problem: the original type spec is not kept, only the macro-expanded.
 Possible "solution": re-read the declarations when available and use those, or type-check with the expanded type, badly.
 Solution 2: use an alternative implementation of declaim. extensible and keeps the original declaration.

Consider conditional reader with shadowed declaration symbols:
#+pluggable-types
(declaim (pluggable-types:ftype (all (a) (function (a) boolean)) my-func))

The idea is to hook into Common Lisp compilation. There's COMPILE and COMPILE-FILE. COMPILER-HOOKS package replaces the original functions for others that run some hooks. The type checking would run as one of those hooks. When a type error ocurrs, a compiler warning is signaled. swank::call-with-compilation-hooks contains the implementation-specific compiler conditions that should be signaled.

TODO:
- Read and consider "Type Inference in the Presence of Subtyping: from
Theory to Practice"
